/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/search/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Users
     * @description Get Users
     */
    get: operations["UserService_GetUsers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/${username}/repos": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get Users Repos
     * @description Get Users Repos
     */
    get: operations["UserService_GetUsersRepos"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    v1ErrorResponse: {
      /** Format: int32 */
      statusCode?: number;
      message?: string;
    };
    userData: {
      /** Format: int32 */
      id?: number;
      login?: string;
      node_id?: string;
      url?: string;
      type?: string;
      /** @default [] */
      repos: components["schemas"]["userRepoData"][];
      /**
       * Format: int32
       * @default 0
       */
      repos_fetch_status: number;
      /** @default false */
      is_collapse: boolean;
      avatar_url?: string;
      repos_url?: string;
    };
    searchUsersResponse: {
      /** Format: int32 */
      total_count?: number;
      items?: components["schemas"]["userData"][];
    };
    userRepoData: {
      /** Format: int32 */
      id?: number;
      name?: string;
      node_id?: string;
      description?: string;
      /** Format: int32 */
      stargazers_count?: number;
      url?: string;
      ssh_url?: string;
      git_url?: string;
      html_url?: string;
    };
    userReposResponse: components["schemas"]["userRepoData"][];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  UserService_GetUsers: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["searchUsersResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
  UserService_GetUsersRepos: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["userReposResponse"];
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["v1ErrorResponse"];
        };
      };
    };
  };
}

export type V1ErrorResponse = components["schemas"]["v1ErrorResponse"];
export type SearchUsersResponse = components["schemas"]["searchUsersResponse"];
export type UserReposResponse = components["schemas"]["userReposResponse"];

export type UserData = components["schemas"]["userData"];
export type UserRepoData = components["schemas"]["userRepoData"];
